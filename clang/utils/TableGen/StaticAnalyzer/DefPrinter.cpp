//===- DefPrinter.cpp - Generate the Analyzer Options .def file -*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
/// \file
/// This file defines the `printAnalyzerOptions()` function, which will
/// print the content of the parsed analyzer config options in the expected
/// format.
//
//===----------------------------------------------------------------------===//

#include "DefPrinter.h"
#include "ConfigValues.h"

#include "llvm/ADT/STLExtras.h"
#include "llvm/Support/raw_ostream.h"
#include "llvm/TableGen/Record.h"

#include <vector>

using namespace llvm;
using namespace clang;
using namespace ento;

static raw_ostream &quoted(raw_ostream &OS, StringRef Str) {
  OS << "\"";
  OS.write_escaped(Str);
  return OS << "\"";
}

namespace {
class DefPrinterVisitor : public ConfigValueVisitor<DefPrinterVisitor> {
  raw_ostream &OS;

public:
  explicit DefPrinterVisitor(raw_ostream &OS) : OS(OS) {}
  void visit(const BooleanConfigValue *C);
  void visit(const EnumConfigValue *C);
  void visit(const IntConfigValue *C);
  void visit(const StringConfigValue *C);
  void visit(const UserModeDependentEnumConfigValue *C);
  void visit(const UserModeDependentIntConfigValue *C);
};
} // namespace

void DefPrinterVisitor::visit(const BooleanConfigValue *C) {
  OS << "ANALYZER_OPTION(bool, " << C->ConfigName << ", ";
  quoted(OS, C->FlagName) << ", ";
  quoted(OS, C->ShortDescription) << ", ";
  OS << (C->DefaultValue ? "true" : "false") << ")";
}
void DefPrinterVisitor::visit(const EnumConfigValue *C) {
  OS << "ANALYZER_OPTION(StringRef, " << C->ConfigName << ", ";
  quoted(OS, C->FlagName) << ", \"";
  OS.write_escaped(C->ShortDescription) << " Value: \\\"";
  interleave(
      C->Options, [&](StringRef Item) { OS.write_escaped(Item); },
      [&] { OS << "\\\", \\\""; });
  OS << "\\\".\""
     << ", ";
  quoted(OS, C->DefaultValue) << ")";
}
void DefPrinterVisitor::visit(const IntConfigValue *C) {
  OS << "ANALYZER_OPTION(unsigned, " << C->ConfigName << ", ";
  quoted(OS, C->FlagName) << ", ";
  quoted(OS, C->ShortDescription) << ", " << C->DefaultValue << "u)";
}
void DefPrinterVisitor::visit(const StringConfigValue *C) {
  OS << "ANALYZER_OPTION(StringRef, " << C->ConfigName << ", ";
  quoted(OS, C->FlagName) << ", ";
  quoted(OS, C->ShortDescription) << ", ";
  quoted(OS, C->DefaultValue) << ")";
}
void DefPrinterVisitor::visit(const UserModeDependentEnumConfigValue *C) {
  OS << "ANALYZER_OPTION_DEPENDS_ON_USER_MODE(StringRef, " << C->ConfigName
     << ", ";
  quoted(OS, C->FlagName) << ", \"";
  OS.write_escaped(C->ShortDescription) << " Value: \\\"";
  interleave(
      C->Options, [&](StringRef Item) { OS.write_escaped(Item); },
      [&] { OS << "\\\", \\\""; });
  OS << "\\\".\""
     << ", ";
  OS << "/* SHALLOW_VAL */ ";
  quoted(OS, C->ShallowDefaultValue) << ", ";
  OS << "/* DEEP_VAL */ ";
  quoted(OS, C->DeepDefaultValue) << ")";
}
void DefPrinterVisitor::visit(const UserModeDependentIntConfigValue *C) {
  OS << "ANALYZER_OPTION_DEPENDS_ON_USER_MODE(unsigned, " << C->ConfigName
     << ", ";
  quoted(OS, C->FlagName) << ", ";
  quoted(OS, C->ShortDescription) << ", ";
  OS << "/* SHALLOW_VAL */ " << C->ShallowDefaultValue << ", ";
  OS << "/* DEEP_VAL */ " << C->DeepDefaultValue << ")";
}

void ento::printAnalyzerOptions(const ParserContext &Ctx, raw_ostream &OS) {
  OS <<
      R"header(// This file is automatically generated. Do not edit this file by hand.

#ifndef LLVM_ADT_STRINGREF_H
#error This .def file is expected to be included in translation units where \
"llvm/ADT/StringRef.h" is already included!
#endif

#ifdef ANALYZER_OPTION
#ifndef ANALYZER_OPTION_DEPENDS_ON_USER_MODE
#error If you didnt include this file with the intent of generating methods, \
define both 'ANALYZER_OPTION' and 'ANALYZER_OPTION_DEPENDS_ON_USER_MODE' macros!
#endif
#endif

#ifndef ANALYZER_OPTION_DEPENDS_ON_USER_MODE
#ifdef ANALYZER_OPTION
#error If you didnt include this file with the intent of generating methods, \
define both 'ANALYZER_OPTION' and 'ANALYZER_OPTION_DEPENDS_ON_USER_MODE' macros!
#endif
#endif

#ifndef ANALYZER_OPTION
/// Create a new analyzer option, but dont generate a method for it in
/// AnalyzerOptions.
///
///   TYPE - The type of the option object that will be stored in
///          AnalyzerOptions. This file is expected to be icluded in translation
///          units where AnalyzerOptions.h is included, so types from that
///          header should be used.
///   NAME - The name of the option object.
///   CMDFLAG - The command line flag for the option.
///             (-analyzer-config CMDFLAG=VALUE)
///   DESC - Description of the flag.
///   DEFAULT_VAL - The default value for CMDFLAG.
#define ANALYZER_OPTION(TYPE, NAME, CMDFLAG, DESC, DEFAULT_VAL)
#endif

#ifndef ANALYZER_OPTION_DEPENDS_ON_USER_MODE
/// Create a new analyzer option, but dont generate a method for it in
/// AnalyzerOptions. It's value depends on the option "user-mode".
///
///   TYPE - The type of the option object that will be stored in
///          AnalyzerOptions. This file is expected to be icluded in translation
///          units where AnalyzerOptions.h is included, so types from that
///          header should be used.
///   NAME - The name of the option object.
///   CMDFLAG - The command line flag for the option.
///             (-analyzer-config CMDFLAG=VALUE)
///   DESC - Description of the flag.
///   SHALLOW_VAL - The default value for CMDFLAG, when "user-mode" was set to
///                 "shallow".
///   DEEP_VAL - The default value for CMDFLAG, when "user-mode" was set to
///              "deep".
#define ANALYZER_OPTION_DEPENDS_ON_USER_MODE(TYPE, NAME, CMDFLAG, DESC,        \
                                             SHALLOW_VAL, DEEP_VAL)
#endif

)header";

  DefPrinterVisitor Printer{OS};
  for (const ConfigValue *Ptr : Ctx.getConfigsInSpellingOrder()) {
    Printer.Visit(Ptr);
    OS << "\n";
  }

  OS << R"footer(
#undef ANALYZER_OPTION_DEPENDS_ON_USER_MODE
#undef ANALYZER_OPTION
)footer";
}
